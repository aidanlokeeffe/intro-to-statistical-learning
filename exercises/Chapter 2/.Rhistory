# a) Use the read.csv() function to read the data into R. Call the loaded data college. Make sure that you have the
# directory set to the correct location for the data
college = read.csv("college.csv", header=TRUE)
rownames(college) = college[,1]
fix(college)
hist(college$S.F.Ratio, xlab="S.F.Ratio", main="Histogram of S.F.Ratio")
# a) Use the read.csv() function to read the data into R. Call the loaded data college. Make sure that you have the
# directory set to the correct location for the data
college = read.csv("college.csv", header=TRUE)
rownames(college) = college[,1]
fix(college)
college = college[,-1]
fix(college)
summary(college)
# ii. Use the pairs() function to produce a scatterplot matrix of the first ten columns or variables of the data.
# Recall that you can reference the first ten columns of a matrix A using A[,1:10]
college$Private = as.factor(college$Private)
pairs(college[,1:10])
plot(x=college$Private, y=college$Outstate, xlab="Private", ylab="Outstate", main="Outstate vs. Private")
Elite = rep("No", nrow(college))
Elite[college$Top10perc > 50] = "Yes"
Elite = as.factor(Elite)
college = data.frame(college, Elite)
summary(college$Elite)
plot( college$Elite, college$Outstate, xlab="Elite", ylab="Outstate", main="Elite vs. Outstate")
par(mfrow=c(2,2))
hist(college$Apps, xlab="Apps", main="Histogram of Apps")
hist(college$Accept, xlab="Accept", main="Histogram of Accept")
hist(college$Top10perc, xlab="Top10perc", main="Histogram of Top10perc")
hist(college$S.F.Ratio, xlab="S.F.Ratio", main="Histogram of S.F.Ratio")
# vi Continue exploring your data, and provide a brief summary of what you discover
pairs(college[,11:19])
hist(college$Apps)
hist(college$Apps)
hist(college$Apps)
hist(college$Apps)
par(mfrow=c(1,3))
hist(college$Apps)
hist(college$Apps)
# vi Continue exploring your data, and provide a brief summary of what you discover
pairs(college[,11:19])
# Okay, let's look at acceptance rate
college$AcceptRate = college$Accept/college$Apps
# And now, I want to look at different variables as a function of private
names(college)
# And now, I want to look at different variables as a function of elite
par(mfrow=c(2,5))
for (i in c(9,10,11,12,13,15,16,17,18,20)){
plot(x=college$elite, y=college[,i])
}
for (i in c(9,10,11,12,13,15,16,17,18,20)){
plot(x=college$Elite, y=college[,i])
}
}
# And now, I want to look at different variables as a function of elite
par(mfrow=c(5,2))
for (i in c(9,10,11,12,13,15,16,17,18,20)){
plot(x=college$Elite, y=college[,i], xlab="Elite", ylab=names(college)[i], main=paste(names(college)[i],"vs. Elite"))
}
for (i in c(9,10,11,12,13,15,16,17,18,20)){
plot(x=college$Elite, y=college[,i], xlab="Elite", ylab=names(college)[i], main=paste(names(college)[i],"vs. Elite"))
}
for (i in c(9,10,11,12,13,15,16,17,18,20)){
plot(x=college$Elite, y=college[,i], xlab="Elite", ylab=names(college)[i], main=paste(names(college)[i],"vs. Elite"))
}
# And now, I want to look at different variables as a function of elite
par(mfrow=c(4,1))
for (i in c(9,10,11,12,13,15,16,17,18,20)){
plot(x=college$Elite, y=college[,i], xlab="Elite", ylab=names(college)[i], main=paste(names(college)[i],"vs. Elite"))
}
# And now, I want to look at different variables as a function of elite
par(mfrow=c(3,1))
for (i in c(9,10,11,12,13,15,16,17,18,20)){
plot(x=college$Elite, y=college[,i], xlab="Elite", ylab=names(college)[i], main=paste(names(college)[i],"vs. Elite"))
}
View(college)
sum( college$Private == "Yes" & college$Elite == "Yes")
sum( college$Private == "No" & college$Elite == "Yes")
sum( college$Private == "No" & college$Elite == "No")
sum( college$Private == "Yes" & college$Elite == "Yes")
sum( college$Private == "Yes" & college$Elite == "No")
sum( college$Private == "No" & college$Elite == "Yes")
sum( college$Private == "No" & college$Elite == "No")
sum( college$Private == "Yes" & college$Elite == "Yes")/len(college$Private)
sum( college$Private == "Yes" & college$Elite == "Yes")/length(college$Private)
sum( college$Private == "No" & college$Elite == "Yes")/length(college$Private)
Auto = read.csv("Auto.csv", header=TRUE, na.strings="?")
Auto = na.omit(Auto)
View(Auto)
library(MASS)
?Boston
library(MASS)
?Boston
# How many rows are in this data set? How many columns? What do the rows and columns represent?
# This data set has 506 rows and 14 columns. Each row represents a town, and the columns are
names(Boston)
# b) Make some pairwise scatterplots of the predictors (columns) in this data set. Describe
# your findings
pairs(Boston[,1:7])
for (i in 1:14){
plot(Boston[,i], Boston$nox, xlab=names(Boston)[i], ylab="nox", main=paste("NOx vs.", names(Boston)[i]))
}
# c) Are there any predictors associated with per capita crime rate? If so, explain the relationship
for (i in 1:14){
plot(Boston[,i], Boston$crim, xlab=names(Boston)[i], ylab="crim", main=paste("crim vs.", names(Boston)[i]))
}
View(college)
library(MASS)
?Boston
# How many rows are in this data set? How many columns? What do the rows and columns represent?
# This data set has 506 rows and 14 columns. Each row represents a town, and the columns are
names(Boston)
# b) Make some pairwise scatterplots of the predictors (columns) in this data set. Describe
# your findings
pairs(Boston[,1:7])
for (i in 1:14){
plot(Boston[,i], Boston$nox, xlab=names(Boston)[i], ylab="nox", main=paste("NOx vs.", names(Boston)[i]))
}
# c) Are there any predictors associated with per capita crime rate? If so, explain the relationship
for (i in 1:14){
plot(Boston[,i], Boston$crim, xlab=names(Boston)[i], ylab="crim", main=paste("crim vs.", names(Boston)[i]))
}
# Crime seems to be positively correlated with nox, age, rad, tax, lstat, and negatively
# correlated with medv
cor(Boston)
# Crime seems to be positively correlated with nox, age, rad, tax, lstat, and negatively
# correlated with medv
cor(Boston)
plot(Boston$ptratio, Boston$crim)
1:4-c(2:3)
names(Boston)
mode(Boston$ptratio)
mode(Boston$ptratio)
ount
count
percent
library(MASS)
?Boston
# How many rows are in this data set? How many columns? What do the rows and columns represent?
# This data set has 506 rows and 14 columns. Each row represents a town, and the columns are
names(Boston)
# b) Make some pairwise scatterplots of the predictors (columns) in this data set. Describe
# your findings
pairs(Boston[,1:7])
for (i in 1:14){
plot(Boston[,i], Boston$nox, xlab=names(Boston)[i], ylab="nox", main=paste("NOx vs.", names(Boston)[i]))
}
# c) Are there any predictors associated with per capita crime rate? If so, explain the relationship
for (i in 1:14){
plot(Boston[,i], Boston$crim, xlab=names(Boston)[i], ylab="crim", main=paste("crim vs.", names(Boston)[i]))
}
# Crime seems to be positively correlated with nox, age, rad, tax, lstat, and negatively
# correlated with medv
cor(Boston)
# d) Do any of the suburbs of Boston appear to have particularly high crime rates? Tax rates?
# Pupil-teacher ratios? Comment on the range of each predictor.
summary(Boston$crim)
summary(Boston$tax)
summary(Boston$ptratio)
hist(Boston$crim)
hist(Boston$tax)
hist(Boston$ptratio)
cor(Boston$crim, Boston$ptratio)
plot(Boston$ptratio, Boston$crim)
# e) How many of the suburbs in this data set bound the Charles river?
sum(Boston$chas)
# 35 neighborhoods in this data set are on the Charles River.
sum(Boston$chas)/length(Boston$chas)
# f) What is the median pupil-teacher ratio among the towns in this data set?
median(Boston$ptratio)
# g) Which suburb of Boston has the lowest median value of owner-occupied homes? What are the
# values of the other predictors for that suburb, and how do those values compare to the
# overall ranged for those predictors? Comment on your findings.
min_val = min(Boston$medv)
min_val_town = Boston[ Boston$medv == 5 ,]
min_val_town
# There are two suburbs with the lowest median value of owner-occupied homes, 399 and 406
percentile = ecdf(Boston$crim)
min_val_town_percentiles = data.frame(percentile(min_val_town$crim))
for (i in 2:14){
percentile = ecdf(Boston[,i])
min_val_town_percentiles = data.frame(min_val_town_percentiles, percentile(min_val_town[,i]))
}
names(min_val_town_percentiles) = names(Boston)
row.names(min_val_town_percentiles) = c(399, 406)
min_val_town_percentiles
towns_8_rooms = Boston[Boston$rm > 8,]
towns_8_rooms
# Again, I'll comment on this again tomorrow, but what I really want to know is where these averages fall in the distribution of the
# whole data set.
mean(towns_8_rooms)
8_rooms = Boston[Boston$rm > 8,]
8_rooms
_8rooms = Boston[Boston$rm > 8,]
rooms8 = Boston[Boston$rm > 8,]
rooms8
# Again, I'll comment on this again tomorrow, but what I really want to know is where these averages fall in the distribution of the
# whole data set.
group_by(rooms8, mean)
# Again, I'll comment on this again tomorrow, but what I really want to know is where these averages fall in the distribution of the
# whole data set.
summary(rooms8)
# Again, I'll comment on this again tomorrow, but what I really want to know is where these averages fall in the distribution of the
# whole data set.
summary(rooms8)[4,]
# Again, I'll comment on this again tomorrow, but what I really want to know is where these averages fall in the distribution of the
# whole data set.
View(summary(rooms8)[4,])
for (i in 2:14){
df = data.frame(df, mean(rooms8[,i]))
}
df = data.frame(mean(rooms8[,1]))
for (i in 2:14){
df = data.frame(df, mean(rooms8[,i]))
}
df
df
name(df) = names(Boston)
df
names(df) = names(Boston)
df
append(df, c(0,0,0,0,0,0,0,0,0,0,0,0,0,0))
df
df[2,] = rep(0,15)
df[2,] = rep(0,14)
df
row.names(df) = c("mean", "percentile")
df
# STEP 2: Calculate the percentile of each mean within the distribution of the corresponding predictor in the whole sample
for (i in 1:14){
percentile = ecdf(Boston[,i])
df[2,i] = percentile(df[1,i])
}
df
row.names(df) = c("mean", "quantile")
# STEP 2: Calculate the percentile of each mean within the distribution of the corresponding predictor in the whole sample
for (i in 1:14){
quantile = ecdf(Boston[,i])
df[2,i] = quantile(df[1,i])
}
df
?Boston
